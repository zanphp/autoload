<?php

namespace ZanPHP\Autoload;

use Composer\Autoload\AutoloadGenerator;
use Composer\Config;
use Composer\Installer\InstallationManager;
use Composer\Package\PackageInterface;
use Composer\Repository\InstalledRepositoryInterface;

class StaticInitializerAutoloadGenerator extends AutoloadGenerator
{
    /**
     * {@inheritdoc}
     */
    /*
    protected function getAutoloadFile($vendorPathToTargetDirCode, $suffix)
    {
        $lastChar = $vendorPathToTargetDirCode[strlen($vendorPathToTargetDirCode) - 1];
        if ("'" === $lastChar || '"' === $lastChar) {
            $vendorPathToTargetDirCode = substr($vendorPathToTargetDirCode, 0, -1).'/autoload_real.php'.$lastChar;
        } else {
            $vendorPathToTargetDirCode .= " . '/autoload_real.php'";
        }

        return <<<AUTOLOAD
<?php

// autoload.php @generated by Composer

use Doctrine\Common\Annotations\AnnotationRegistry;

require_once $vendorPathToTargetDirCode . '/autoload_real.php';

\$loader = ComposerAutoloaderInit$suffix::getLoader();

call_user_func(function() {
    \$funcs = spl_autoload_functions();

    \$staticInitFuncs = [];
    foreach (\$funcs as \$func) {
        spl_autoload_unregister(\$func);

        \$staticInitFuncs[] = function(\$class) use(\$func) {
            \$func(\$class);

            if (class_exists(\$class, false)) {
                \$method = "__static";
                if (method_exists(\$class, \$method) && (new \ReflectionMethod(\$class, \$method))->isStatic()) {
                    call_user_func("\$class::\$method");
                }
            }
        };
    }

    foreach (\$staticInitFuncs as \$func) {
        spl_autoload_register(\$func);
    }
});


return \$loader;

AUTOLOAD;
    }
*/


    public function dump(Config $config, InstalledRepositoryInterface $localRepo, PackageInterface $mainPackage, InstallationManager $installationManager, $targetDir, $scanPsr0Packages = false, $suffix = '')
    {
        parent::dump($config, $localRepo, $mainPackage, $installationManager, $targetDir, $scanPsr0Packages, $suffix);
        $this->safeCopy(__DIR__.'/ClassLoader.php', $targetDir.'/ClassLoader.php');
    }
}